
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  email String @unique
  bio String?
  avatar String? 
  password String
  tweets Tweet[]
  likes Like[]
  responses Response[]
  subscriptions Subscription[] @relation("UserSubscriptions")
  subscribers Subscription[] @relation("UserSubscribers") 
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Tweet {
  id Int @id @default(autoincrement())
  title String
  photo String?
  description String
  views Int @default(0)
  likes Like[]
  responses Response[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Response {
  id Int @id @default(autoincrement())
  payload String
  tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Like {
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  @@id(name: "id", [userId, tweetId])
}

model Subscription {
  id Int @id @default(autoincrement())
  subscriber User @relation("UserSubscriptions", fields: [subscriberId], references: [id], onDelete: Cascade)
  subscriberId Int
  subscribedTo User @relation("UserSubscribers", fields: [subscribedToId], references: [id], onDelete: Cascade)
  subscribedToId Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

